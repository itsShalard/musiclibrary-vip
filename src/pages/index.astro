---
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

// Get all blog posts directly
const posts = await getCollection('blog');

// Transform to the format we need
const allPosts = posts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  genre: post.data.genre,
  fileType: post.data.fileType,
  date: post.data.date,
  artwork_url: post.data.artwork_url,
  download_url: post.data.download_url,
  tags: post.data.tags,
  content: post.body
})).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
---

<Layout title="Music Library VIP - Blog Search">
  <main class="max-w-[1000px] mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <header class="text-center mb-8">
      <div class="mb-4">
        <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
          Music Library VIP
        </h1>
        <p class="text-lg text-gray-700">Discover music insights and stories</p>
      </div>
      <div class="w-16 h-1 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto rounded-full"></div>
    </header>

    <!-- Search Input -->
    <div class="mb-8">
      <div class="relative w-full">
        <input
          type="text"
          id="searchInput"
          placeholder="Search tracks instantly - title, genre, file type, or use #tag for tag search..."
          class="w-full px-4 py-3 pl-10 text-gray-700 bg-white border border-gray-200 rounded-xl shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100 focus:ring-inset transition-all duration-200 box-border"
          autocomplete="off"
        />
        <div class="absolute inset-y-0 left-0 flex items-center pl-3">
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <div id="clearSearch" class="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer hidden">
          <svg class="w-5 h-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
      </div>
    </div>

    <!-- Results Counter -->
    <div class="mb-6 flex justify-between items-center">
      <p id="resultsCounter" class="text-sm text-gray-600 font-medium">
        Showing <span id="resultCount" class="text-blue-600">{allPosts.length}</span> tracks
        <span id="searchStatus" class="ml-2 text-xs text-green-600 hidden">✨ Live search active</span>
      </p>
      <div id="searchIndicator" class="text-xs text-gray-400 hidden">
        Search updates instantly as you type
      </div>
    </div>

    <!-- Blog Posts Grid -->
    <div id="blogGrid" class="space-y-6">
      {allPosts.map((post) => (
        <article class="bg-white/80 backdrop-blur-sm rounded-xl shadow-sm p-4 sm:p-6 border border-gray-100 hover:shadow-md hover:border-blue-100 transition-all duration-300">
          <div class="flex gap-4">
            <!-- Larger Artwork Image -->
            <div class="flex-shrink-0">
              <img 
                src={post.artwork_url} 
                alt={`${post.title} artwork`}
                class="w-20 h-20 sm:w-24 sm:h-24 object-cover rounded-lg shadow-sm border border-gray-200"
                loading="lazy"
              />
            </div>
            
            <!-- Content Section -->
            <div class="flex-1 min-w-0 space-y-3">
              <!-- Title and Format Row -->
              <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
                <div class="flex-1 min-w-0">
                  <h2 class="text-lg sm:text-xl font-semibold text-gray-900 leading-tight truncate">
                    {post.title}
                  </h2>
                  <div class="flex items-center gap-2 mt-1">
                    <span class="text-gray-600 px-2 py-1 bg-blue-100 rounded-md text-xs font-medium">
                      {post.fileType}
                    </span>
                  </div>
                </div>
                <time class="text-sm text-gray-500 whitespace-nowrap flex-shrink-0">
                  {new Date(post.date).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                  })}
                </time>
              </div>
              
              <!-- Genre and Tags Row -->
              <div class="space-y-2">
                <!-- Genre -->
                <div class="flex items-center gap-2">
                  <span class="text-sm font-medium text-gray-700">Genre:</span>
                  <span class="text-gray-600 px-2 py-1 bg-gray-100 rounded-md text-xs">{post.genre}</span>
                </div>
                
                <!-- Tags -->
                <div class="flex flex-wrap gap-1">
                  {post.tags.map((tag) => (
                    <button 
                      class="inline-block bg-gradient-to-r from-blue-50 to-purple-50 text-blue-600 text-xs px-2 py-0.5 rounded-full border border-blue-100 hover:from-blue-100 hover:to-purple-100 hover:border-blue-200 transition-all duration-200 cursor-pointer"
                      onclick={`searchByTag('${tag}')`}
                      title={`Click to search for #${tag}`}
                    >
                      #{tag}
                    </button>
                  ))}
                </div>
              </div>
              
              <!-- Download Button -->
              <div class="flex justify-end">
                <a 
                  href={post.download_url} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-sm font-medium rounded-lg hover:from-blue-600 hover:to-purple-600 transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  Download
                </a>
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>

    <!-- Loading Animation -->
    <div id="loadingAnimation" class="hidden text-center py-12">
      <div class="flex justify-center items-center mb-4">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Searching...</h3>
      <p class="text-gray-600">Finding the perfect tracks for you</p>
    </div>

    <!-- Show More Button -->
    <div id="showMoreContainer" class="text-center py-8 hidden">
      <button 
        id="showMoreBtn"
        class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-medium rounded-lg hover:from-blue-600 hover:to-purple-600 transition-all duration-200 shadow-sm hover:shadow-md"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
        </svg>
        Show More Tracks
        <span id="remainingCount" class="ml-2 px-2 py-1 bg-white/20 rounded-full text-xs"></span>
      </button>
    </div>

    <!-- No Results Message -->
    <div id="noResults" class="hidden text-center py-12">
      <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.219 0-4.207.906-5.65 2.368A8.959 8.959 0 016 15c-2.219 0-4.207.906-5.65 2.368A8.959 8.959 0 010 15c-.34 0-.677.20-1.007.057A8.959 8.959 0 000 12c0-4.971 4.029-9 9-9s9 4.029 9 9a8.959 8.959 0 01-.057.993z"></path>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No tracks found</h3>
      <p class="text-gray-600">Try adjusting your search terms or browse all tracks.</p>
    </div>
  </main>

  <Footer />

  <!-- Search Script -->
  <script type="module" define:vars={{ allPosts }} is:inline>
    const searchInput = document.getElementById('searchInput');
    const blogGrid = document.getElementById('blogGrid');
    const noResults = document.getElementById('noResults');
    const loadingAnimation = document.getElementById('loadingAnimation');
    const showMoreContainer = document.getElementById('showMoreContainer');
    const showMoreBtn = document.getElementById('showMoreBtn');
    const remainingCount = document.getElementById('remainingCount');
    const resultCount = document.getElementById('resultCount');
    
    let searchTimeout = null;
    let currentPosts = [];
    let displayedPosts = [];
    let postsPerPage = 10;
    let currentPage = 1;
    
    console.log('Loaded posts:', allPosts.length);
    
    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    }
    
    function createPostHTML(post) {
      return `
        <article class="bg-white/80 backdrop-blur-sm rounded-xl shadow-sm p-4 sm:p-6 border border-gray-100 hover:shadow-md hover:border-blue-100 transition-all duration-300">
          <div class="flex gap-4">
            <div class="flex-shrink-0">
              <img 
                src="${post.artwork_url}" 
                alt="${post.title} artwork"
                class="w-20 h-20 sm:w-24 sm:h-24 object-cover rounded-lg shadow-sm border border-gray-200"
                loading="lazy"
              />
              
            </div>
            
            <div class="flex-1 min-w-0 space-y-3">
              <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
                <div class="flex-1 min-w-0">
                  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <h2 class="text-lg sm:text-xl font-semibold text-gray-900 leading-tight truncate">
                      ${post.title}
                    </h2>   
                                
                    <a 
                      href="${post.download_url}" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-sm font-medium rounded-lg hover:from-blue-600 hover:to-purple-600 transition-all duration-200 shadow-sm hover:shadow-md"
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Download
                    </a>
                 </div>                              
                  <div class="flex flex-col sm:flex-row items-start gap-2 mt-1">
                    <span class="text-gray-600 px-2 py-1 bg-blue-100 rounded-md text-xs font-medium">
                      ${post.fileType}
                    </span>
                      <div class="flex items-center gap-2">
                         <span class="text-sm font-medium text-gray-700">Genre:</span>
                        <span class="text-gray-600 px-2 py-1 bg-gray-100 rounded-md text-xs">${post.genre}</span>
                      </div>
                    <div class="flex flex-wrap gap-1">
                      ${post.tags.map(tag => `
                        <button class="inline-block bg-gradient-to-r from-blue-50 to-purple-50 text-blue-600 text-xs px-2 py-0.5 rounded-full border border-blue-100 hover:from-blue-100 hover:to-purple-100 hover:border-blue-200 transition-all duration-200 cursor-pointer" onclick="searchByTag('${tag}')" title="Click to search for #${tag}">
                          #${tag}
                        </button>
                      `).join('')}
                    </div>

                              <time class="text-sm text-gray-500 whitespace-nowrap flex-shrink-0">
                  ${formatDate(post.date)}
                </time>

                  </div>   
                </div>
                
        
              </div>
            

            </div>
          </div>
        </article>
      `;
    }
    
    function searchPosts(query) {
      console.log('searchPosts called with query:', query);
      console.log('allPosts length:', allPosts.length);
      
      if (!query.trim()) {
        console.log('Empty query, returning all posts');
        return allPosts;
      }
      
      const searchTerm = query.toLowerCase().trim();
      console.log('Search term:', searchTerm);
      
      // Check if it's a tag search (starts with #)
      const isTagSearch = searchTerm.startsWith('#');
      const tagSearchTerm = isTagSearch ? searchTerm.substring(1) : searchTerm;
      
      try {
        // Enhanced search with tag-specific functionality
        const results = allPosts.filter(post => {
          if (!post) {
            console.warn('Found null/undefined post:', post);
            return false;
          }
          
          // If it's a tag search, only search in tags
          if (isTagSearch) {
            const tagMatch = post.tags && post.tags.some(tag => tag && tag.toLowerCase().includes(tagSearchTerm));
            if (tagMatch) {
              console.log('Tag match found:', post.title, 'for tag:', tagSearchTerm);
            }
            return tagMatch;
          }
          
          // Regular search across all fields
          const titleMatch = post.title && post.title.toLowerCase().includes(searchTerm);
          const genreMatch = post.genre && post.genre.toLowerCase().includes(searchTerm);
          const fileTypeMatch = post.fileType && post.fileType.toLowerCase().includes(searchTerm);
          const tagMatch = post.tags && post.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
          const contentMatch = post.content && post.content.toLowerCase().includes(searchTerm);
          
          const match = titleMatch || genreMatch || fileTypeMatch || tagMatch || contentMatch;
          if (match) {
            console.log('Match found:', post.title);
          }
          return match;
        });
        
        console.log('Filter completed. Results:', results.length);
        
        // Sort by relevance: tag matches first (for tag searches), then by date
        return results.sort((a, b) => {
          if (isTagSearch) {
            // For tag searches, prioritize exact tag matches
            const aExactMatch = a.tags && a.tags.some(tag => tag.toLowerCase() === tagSearchTerm);
            const bExactMatch = b.tags && b.tags.some(tag => tag.toLowerCase() === tagSearchTerm);
            
            if (aExactMatch && !bExactMatch) return -1;
            if (!aExactMatch && bExactMatch) return 1;
          }
          
          // Sort by date (newest first)
          if (!a.date || !b.date) return 0;
          return new Date(b.date).getTime() - new Date(a.date).getTime();
        });
      } catch (error) {
        console.error('Error in searchPosts:', error);
        return [];
      }
    }
    
    function showLoading() {
      blogGrid.style.display = 'none';
      noResults.style.display = 'none';
      loadingAnimation.style.display = 'block';
    }
    
    function hideLoading() {
      loadingAnimation.style.display = 'none';
    }
    
    function updateResults(filteredPosts, resetPagination = true) {
      hideLoading();
      
      if (resetPagination) {
        currentPosts = filteredPosts;
        currentPage = 1;
        displayedPosts = [];
      }
      
      if (currentPosts.length === 0) {
        blogGrid.style.display = 'none';
        noResults.style.display = 'block';
        showMoreContainer.style.display = 'none';
        resultCount.textContent = '0';
        return;
      }
      
      // Show posts for current page
      const startIndex = (currentPage - 1) * postsPerPage;
      const endIndex = startIndex + postsPerPage;
      const newPosts = currentPosts.slice(startIndex, endIndex);
      
      if (resetPagination) {
        displayedPosts = newPosts;
        blogGrid.innerHTML = displayedPosts.map(createPostHTML).join('');
      } else {
        displayedPosts = displayedPosts.concat(newPosts);
        blogGrid.innerHTML += newPosts.map(createPostHTML).join('');
      }
      
      blogGrid.style.display = 'block';
      noResults.style.display = 'none';
      resultCount.textContent = currentPosts.length;
      
      // Update search status based on query type
      const currentQuery = searchInput.value.trim();
      if (currentQuery.startsWith('#')) {
        searchStatus.textContent = '🏷️ Album search active';
        searchStatus.classList.remove('hidden');
      } else if (currentQuery) {
        searchStatus.textContent = '✨ Live search active';
        searchStatus.classList.remove('hidden');
      } else {
        searchStatus.classList.add('hidden');
      }
      
      // Show/hide Show More button
      const remainingPosts = currentPosts.length - displayedPosts.length;
      if (remainingPosts > 0) {
        showMoreContainer.style.display = 'block';
        remainingCount.textContent = `(${remainingPosts} more)`;
      } else {
        showMoreContainer.style.display = 'none';
      }
    }
    
    // Get clear button
    const clearButton = document.getElementById('clearSearch');
    
    // Get status indicators
    const searchStatus = document.getElementById('searchStatus');
    const searchIndicator = document.getElementById('searchIndicator');
    
    // Simple and reliable search function
    function performSearch(query) {
      console.log('Searching for:', query);
      
      // Clear any existing timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      // If query is empty, show all posts immediately
      if (!query.trim()) {
        console.log('Empty query, showing all posts');
        updateResults(allPosts);
        clearButton.classList.add('hidden');
        searchStatus.classList.add('hidden');
        searchIndicator.classList.add('hidden');
        return;
      }
      
      // Show/hide clear button and status indicators
      clearButton.classList.remove('hidden');
      searchStatus.classList.remove('hidden');
      searchIndicator.classList.remove('hidden');
      
      // Always use immediate search for better user experience
      try {
        console.log('Performing search for:', query);
        const filteredPosts = searchPosts(query);
        console.log('Search completed. Found posts:', filteredPosts.length);
        updateResults(filteredPosts);
      } catch (error) {
        console.error('Search error:', error);
        // Fallback to showing all posts if search fails
        updateResults(allPosts);
      }
    }
    
    // Instant input event listeners - multiple events for maximum responsiveness
    searchInput.addEventListener('input', (e) => {
      console.log('Input event triggered with value:', e.target.value);
      performSearch(e.target.value);
    });
    
    searchInput.addEventListener('keyup', (e) => {
      console.log('Keyup event triggered with value:', e.target.value);
      performSearch(e.target.value);
    });
    
    searchInput.addEventListener('paste', (e) => {
      console.log('Paste event triggered');
      // Handle paste events with a tiny delay to let the paste complete
      setTimeout(() => {
        performSearch(e.target.value);
      }, 1);
    });
    
    console.log('All search event listeners attached successfully');
    
    // Show More button functionality
    showMoreBtn.addEventListener('click', () => {
      currentPage++;
      updateResults(currentPosts, false);
    });
    
    // Clear search functionality
    clearButton.addEventListener('click', () => {
      searchInput.value = '';
      clearButton.classList.add('hidden');
      updateResults(allPosts);
      searchInput.focus();
    });
    
    // Focus search input when user starts typing
    document.addEventListener('keydown', (e) => {
      if (e.target === searchInput) return;
      if (e.key.match(/[a-zA-Z0-9]/)) {
        searchInput.focus();
      }
    });
    
    // Initialize with all posts
    try {
      console.log('All posts data:', allPosts);
      updateResults(allPosts);
      console.log('Search initialized successfully with', allPosts.length, 'posts');
      
      // Auto-focus search input when page loads
      setTimeout(() => {
        searchInput.focus();
        console.log('Search input focused');
      }, 100);
      
    } catch (error) {
      console.error('Error initializing search:', error);
      console.error('allPosts:', allPosts);
    }

    // Function to handle tag clicks
    window.searchByTag = function(tag) {
      console.log('Searching by tag:', tag);
      const tagQuery = '#' + tag;
      searchInput.value = tagQuery;
      performSearch(tagQuery);
      searchInput.focus();
      
      // Add visual feedback
      searchInput.classList.add('ring-2', 'ring-purple-200');
      setTimeout(() => {
        searchInput.classList.remove('ring-2', 'ring-purple-200');
      }, 1000);
    };
    
    // Add a test function to window for debugging
    window.testSearch = function(query) {
      console.log('Testing search with query:', query);
      const results = searchPosts(query);
      console.log('Results:', results);
      updateResults(results);
      return results;
    };
    
    // Test tag search function
    window.testTagSearch = function(tag) {
      return window.testSearch('#' + tag);
    };
  </script>
</Layout>
